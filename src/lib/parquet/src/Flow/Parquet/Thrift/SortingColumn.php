<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.19.0).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;

/**
 * Wrapper struct to specify sort order.
 */
class SortingColumn extends TBase
{
    public static $_TSPEC = [
        1 => [
            'var' => 'column_idx',
            'isRequired' => true,
            'type' => TType::I32,
        ],
        2 => [
            'var' => 'descending',
            'isRequired' => true,
            'type' => TType::BOOL,
        ],
        3 => [
            'var' => 'nulls_first',
            'isRequired' => true,
            'type' => TType::BOOL,
        ],
    ];

    public static $isValidate = false;

    /**
     * The column index (in this row group) *.
     *
     * @var int
     */
    public $column_idx;

    /**
     * If true, indicates this column is sorted in descending order. *.
     *
     * @var bool
     */
    public $descending;

    /**
     * If true, nulls will come before non-null values, otherwise,
     * nulls go at the end.
     *
     * @var bool
     */
    public $nulls_first;

    public function __construct($vals = null)
    {
        if (\is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'SortingColumn';
    }

    public function read($input)
    {
        return $this->_read('SortingColumn', self::$_TSPEC, $input);
    }

    public function write($output)
    {
        return $this->_write('SortingColumn', self::$_TSPEC, $output);
    }
}
