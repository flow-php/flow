<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.19.0).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;

/**
 * Represents a element inside a schema definition.
 *  - if it is a group (inner node) then type is undefined and num_children is defined
 *  - if it is a primitive type (leaf) then type is defined and num_children is undefined
 * the nodes are listed in depth first traversal order.
 */
class SchemaElement extends TBase
{
    public static $_TSPEC = [
        1 => [
            'var' => 'type',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\Flow\Parquet\Thrift\Type',
        ],
        2 => [
            'var' => 'type_length',
            'isRequired' => false,
            'type' => TType::I32,
        ],
        3 => [
            'var' => 'repetition_type',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\Flow\Parquet\Thrift\FieldRepetitionType',
        ],
        4 => [
            'var' => 'name',
            'isRequired' => true,
            'type' => TType::STRING,
        ],
        5 => [
            'var' => 'num_children',
            'isRequired' => false,
            'type' => TType::I32,
        ],
        6 => [
            'var' => 'converted_type',
            'isRequired' => false,
            'type' => TType::I32,
            'class' => '\Flow\Parquet\Thrift\ConvertedType',
        ],
        7 => [
            'var' => 'scale',
            'isRequired' => false,
            'type' => TType::I32,
        ],
        8 => [
            'var' => 'precision',
            'isRequired' => false,
            'type' => TType::I32,
        ],
        9 => [
            'var' => 'field_id',
            'isRequired' => false,
            'type' => TType::I32,
        ],
        10 => [
            'var' => 'logicalType',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\LogicalType',
        ],
    ];

    public static $isValidate = false;

    /**
     * DEPRECATED: When the schema is the result of a conversion from another model.
     * Used to record the original type to help with cross conversion.
     *
     * This is superseded by logicalType.
     *
     * @var int
     */
    public $converted_type;

    /**
     * When the original schema supports field ids, this will save the
     * original field id in the parquet schema.
     *
     * @var int
     */
    public $field_id;

    /**
     * The logical type of this SchemaElement.
     *
     * LogicalType replaces ConvertedType, but ConvertedType is still required
     * for some logical types to ensure forward-compatibility in format v1.
     *
     * @var LogicalType
     */
    public $logicalType;

    /**
     * Name of the field in the schema.
     *
     * @var string
     */
    public $name;

    /**
     * Nested fields.  Since thrift does not support nested fields,
     * the nesting is flattened to a single list by a depth-first traversal.
     * The children count is used to construct the nested relationship.
     * This field is not set when the element is a primitive type.
     *
     * @var int
     */
    public $num_children;

    /**
     * @var int
     */
    public $precision;

    /**
     * repetition of the field. The root of the schema does not have a repetition_type.
     * All other nodes must have one.
     *
     * @var int
     */
    public $repetition_type;

    /**
     * DEPRECATED: Used when this column contains decimal data.
     * See the DECIMAL converted type for more details.
     *
     * This is superseded by using the DecimalType annotation in logicalType.
     *
     * @var int
     */
    public $scale;

    /**
     * Data type for this field. Not set if the current element is a non-leaf node.
     *
     * @var int
     */
    public $type;

    /**
     * If type is FIXED_LEN_BYTE_ARRAY, this is the byte length of the values.
     * Otherwise, if specified, this is the maximum bit length to store any of the values.
     * (e.g. a low cardinality INT col could have this set to 3).  Note that this is
     * in the schema, and therefore fixed for the entire file.
     *
     * @var int
     */
    public $type_length;

    public function __construct($vals = null)
    {
        if (\is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'SchemaElement';
    }

    public function read($input)
    {
        return $this->_read('SchemaElement', self::$_TSPEC, $input);
    }

    public function write($output)
    {
        return $this->_write('SchemaElement', self::$_TSPEC, $output);
    }
}
