<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.19.0).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;

/**
 * Decimal logical type annotation.
 *
 * Scale must be zero or a positive integer less than or equal to the precision.
 * Precision must be a non-zero positive integer.
 *
 * To maintain forward-compatibility in v1, implementations using this logical
 * type must also set scale and precision on the annotated SchemaElement.
 *
 * Allowed for physical types: INT32, INT64, FIXED, and BINARY
 */
class DecimalType extends TBase
{
    public static $_TSPEC = [
        1 => [
            'var' => 'scale',
            'isRequired' => true,
            'type' => TType::I32,
        ],
        2 => [
            'var' => 'precision',
            'isRequired' => true,
            'type' => TType::I32,
        ],
    ];

    public static $isValidate = false;

    /**
     * @var int
     */
    public $precision;

    /**
     * @var int
     */
    public $scale;

    public function __construct($vals = null)
    {
        if (\is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'DecimalType';
    }

    public function read($input)
    {
        return $this->_read('DecimalType', self::$_TSPEC, $input);
    }

    public function write($output)
    {
        return $this->_write('DecimalType', self::$_TSPEC, $output);
    }
}
