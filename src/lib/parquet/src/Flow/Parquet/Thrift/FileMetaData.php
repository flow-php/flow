<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.19.0).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;

/**
 * Description for file metadata.
 */
class FileMetaData extends TBase
{
    public static $_TSPEC = [
        1 => [
            'var' => 'version',
            'isRequired' => true,
            'type' => TType::I32,
        ],
        2 => [
            'var' => 'schema',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => [
                'type' => TType::STRUCT,
                'class' => '\Flow\Parquet\Thrift\SchemaElement',
            ],
        ],
        3 => [
            'var' => 'num_rows',
            'isRequired' => true,
            'type' => TType::I64,
        ],
        4 => [
            'var' => 'row_groups',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => [
                'type' => TType::STRUCT,
                'class' => '\Flow\Parquet\Thrift\RowGroup',
            ],
        ],
        5 => [
            'var' => 'key_value_metadata',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => [
                'type' => TType::STRUCT,
                'class' => '\Flow\Parquet\Thrift\KeyValue',
            ],
        ],
        6 => [
            'var' => 'created_by',
            'isRequired' => false,
            'type' => TType::STRING,
        ],
        7 => [
            'var' => 'column_orders',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => [
                'type' => TType::STRUCT,
                'class' => '\Flow\Parquet\Thrift\ColumnOrder',
            ],
        ],
        8 => [
            'var' => 'encryption_algorithm',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\EncryptionAlgorithm',
        ],
        9 => [
            'var' => 'footer_signing_key_metadata',
            'isRequired' => false,
            'type' => TType::STRING,
        ],
    ];

    public static $isValidate = false;

    /**
     * Sort order used for the min_value and max_value fields in the Statistics
     * objects and the min_values and max_values fields in the ColumnIndex
     * objects of each column in this file. Sort orders are listed in the order
     * matching the columns in the schema. The indexes are not necessary the same
     * though, because only leaf nodes of the schema are represented in the list
     * of sort orders.
     *
     * Without column_orders, the meaning of the min_value and max_value fields
     * in the Statistics object and the ColumnIndex object is undefined. To ensure
     * well-defined behaviour, if these fields are written to a Parquet file,
     * column_orders must be written as well.
     *
     * The obsolete min and max fields in the Statistics object are always sorted
     * by signed comparison regardless of column_orders.
     *
     * @var ColumnOrder[]
     */
    public $column_orders;

    /**
     * String for application that wrote this file.  This should be in the format
     * <Application> version <App Version> (build <App Build Hash>).
     * e.g. impala version 1.0 (build 6cf94d29b2b7115df4de2c06e2ab4326d721eb55).
     *
     * @var string
     */
    public $created_by;

    /**
     * Encryption algorithm. This field is set only in encrypted files
     * with plaintext footer. Files with encrypted footer store algorithm id
     * in FileCryptoMetaData structure.
     *
     * @var EncryptionAlgorithm
     */
    public $encryption_algorithm;

    /**
     * Retrieval metadata of key used for signing the footer.
     * Used only in encrypted files with plaintext footer.
     *
     * @var string
     */
    public $footer_signing_key_metadata;

    /**
     * Optional key/value metadata *.
     *
     * @var KeyValue[]
     */
    public $key_value_metadata;

    /**
     * Number of rows in this file *.
     *
     * @var int
     */
    public $num_rows;

    /**
     * Row groups in this file *.
     *
     * @var RowGroup[]
     */
    public $row_groups;

    /**
     * Parquet schema for this file.  This schema contains metadata for all the columns.
     * The schema is represented as a tree with a single root.  The nodes of the tree
     * are flattened to a list by doing a depth-first traversal.
     * The column metadata contains the path in the schema for that column which can be
     * used to map columns to nodes in the schema.
     * The first element is the root *.
     *
     * @var SchemaElement[]
     */
    public $schema;

    /**
     * Version of this file *.
     *
     * @var int
     */
    public $version;

    public function __construct($vals = null)
    {
        if (\is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'FileMetaData';
    }

    public function read($input)
    {
        return $this->_read('FileMetaData', self::$_TSPEC, $input);
    }

    public function write($output)
    {
        return $this->_write('FileMetaData', self::$_TSPEC, $output);
    }
}
