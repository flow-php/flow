<?php

declare(strict_types=1);
namespace Flow\Parquet\Thrift;

/**
 * Autogenerated by Thrift Compiler (0.19.0).
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;

class ColumnChunk extends TBase
{
    public static $_TSPEC = [
        1 => [
            'var' => 'file_path',
            'isRequired' => false,
            'type' => TType::STRING,
        ],
        2 => [
            'var' => 'file_offset',
            'isRequired' => true,
            'type' => TType::I64,
        ],
        3 => [
            'var' => 'meta_data',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\ColumnMetaData',
        ],
        4 => [
            'var' => 'offset_index_offset',
            'isRequired' => false,
            'type' => TType::I64,
        ],
        5 => [
            'var' => 'offset_index_length',
            'isRequired' => false,
            'type' => TType::I32,
        ],
        6 => [
            'var' => 'column_index_offset',
            'isRequired' => false,
            'type' => TType::I64,
        ],
        7 => [
            'var' => 'column_index_length',
            'isRequired' => false,
            'type' => TType::I32,
        ],
        8 => [
            'var' => 'crypto_metadata',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Flow\Parquet\Thrift\ColumnCryptoMetaData',
        ],
        9 => [
            'var' => 'encrypted_column_metadata',
            'isRequired' => false,
            'type' => TType::STRING,
        ],
    ];

    public static $isValidate = false;

    /**
     * Size of ColumnChunk's ColumnIndex, in bytes *.
     *
     * @var int
     */
    public $column_index_length;

    /**
     * File offset of ColumnChunk's ColumnIndex *.
     *
     * @var int
     */
    public $column_index_offset;

    /**
     * Crypto metadata of encrypted columns *.
     *
     * @var ColumnCryptoMetaData
     */
    public $crypto_metadata;

    /**
     * Encrypted column metadata for this chunk *.
     *
     * @var string
     */
    public $encrypted_column_metadata;

    /**
     * Byte offset in file_path to the ColumnMetaData *.
     *
     * @var int
     */
    public $file_offset;

    /**
     * File where column data is stored.  If not set, assumed to be same file as
     * metadata.  This path is relative to the current file.
     *
     * @var string
     */
    public $file_path;

    /**
     * Column metadata for this chunk. This is the same content as what is at
     * file_path/file_offset.  Having it here has it replicated in the file
     * metadata.
     *
     * @var ColumnMetaData
     */
    public $meta_data;

    /**
     * Size of ColumnChunk's OffsetIndex, in bytes *.
     *
     * @var int
     */
    public $offset_index_length;

    /**
     * File offset of ColumnChunk's OffsetIndex *.
     *
     * @var int
     */
    public $offset_index_offset;

    public function __construct($vals = null)
    {
        if (\is_array($vals)) {
            parent::__construct(self::$_TSPEC, $vals);
        }
    }

    public function getName()
    {
        return 'ColumnChunk';
    }

    public function read($input)
    {
        return $this->_read('ColumnChunk', self::$_TSPEC, $input);
    }

    public function write($output)
    {
        return $this->_write('ColumnChunk', self::$_TSPEC, $output);
    }
}
