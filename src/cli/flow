#!/usr/bin/env php
<?php declare(strict_types=1);

use Flow\CLI\Command\ConvertCommand;
use Flow\CLI\Command\RunCommand;
use Flow\CLI\Command\FileSchemaCommand;
use Flow\CLI\FlowVersion;
use Flow\ParquetViewer\Command\ReadDataCommand;
use Flow\ParquetViewer\Command\ReadMetadataCommand;
use Symfony\Component\Console\Application;

$pharRuntime = ('' !== Phar::running(false));

if ($pharRuntime) {
    require 'phar://flow.phar/vendor/autoload.php';
} else {
    if (\is_file(__DIR__ . '/vendor/autoload.php')) {
        $autoloader = require __DIR__ . '/vendor/autoload.php';
    } elseif (\is_file(__DIR__ . '/../vendor/autoload.php')) {
        $autoloader = require __DIR__ . '/../vendor/autoload.php';
    } elseif (\is_file(__DIR__ . '/../../vendor/autoload.php')) {
        $autoloader = require __DIR__ . '/../../vendor/autoload.php';
    } elseif (\is_file(__DIR__ . '/../../../vendor/autoload.php')) {
        $autoloader = require __DIR__ . '/../../../vendor/autoload.php';
    } else {
        echo 'Cannot find the vendor directory, have you executed composer install?' . PHP_EOL;
        echo 'See https://getcomposer.org to get Composer.' . PHP_EOL;
        exit(1);
    }
}

if (false === \in_array(PHP_SAPI, ['cli', 'phpdbg', 'embed'], true)) {
    print PHP_EOL . 'This app may only be invoked from a command line, got "' . PHP_SAPI . '"' . PHP_EOL;

    exit(1);
}

$_ENV['FLOW_PHAR_APP'] = 1;

\ini_set('memory_limit', -1);

$application = new Application('Flow PHP - Data processing framework', $pharRuntime ? FlowVersion::getVersion() : 'UNKNOWN');

$application->add((new ReadDataCommand())->setName('parquet:read')->setAliases(['parquet:read:data']));
$application->add((new ReadMetadataCommand())->setName('parquet:read:metadata'));
$application->add((new RunCommand())->setName('run'));
$application->add((new FileSchemaCommand())->setName('file:schema')->setAliases(['schema']));

$application->run();